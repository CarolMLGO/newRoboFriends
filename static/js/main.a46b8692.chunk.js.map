{"version":3,"sources":["components/card.module.scss","components/cardlist.module.scss","components/searchbox.module.scss","components/scroll.module.scss","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","container/App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","name","email","id","className","styles","alt","width","height","src","CardList","robots","map","cur","key","SearchBox","searchChange","type","search__input","placeholder","onChange","Scroll","props","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","resp","json","users","filteredrobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yGACAA,EAAOC,QAAU,CAAC,KAAO,qB,gBCAzBD,EAAOC,QAAU,CAAC,SAAW,6B,gBCA7BD,EAAOC,QAAU,CAAC,cAAgB,mC,gBCAlCD,EAAOC,QAAU,CAAC,OAAS,yB,oNCcZC,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GACzB,OACI,yBAAKC,UAAWC,IAAOL,MACnB,yBAAKM,IAAK,SAASC,MAAM,MAAMC,OAAO,MAAMC,IAAG,+BAA0BN,EAA1B,eAC/C,6BACI,gCAAMF,EAAN,KACA,gCAAMC,EAAN,Q,gBCQDQ,EAbE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACI,yBAAKP,UAAWC,IAAOK,UAEnBC,EAAOC,KAAI,SAAAC,GACP,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAIV,GAAIF,KAAMY,EAAIZ,KAAMC,MAAOW,EAAIX,MAAOC,GAAKU,EAAIV,U,iBCEtEY,EARG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACI,6BACI,2BAAOC,KAAK,OAAOb,UAAWC,IAAOa,cAAeC,YAAY,gBAAgBC,SAAUJ,M,iBCKvFK,EARA,SAACC,GACZ,OACI,yBAAKlB,UAAWC,IAAOgB,QAClBC,EAAMC,WCgBJC,E,YAnBX,WAAYF,GAAQ,IAAD,8BACf,4CAAMA,KACDG,MAAQ,CACTC,UAAU,GAHC,E,+EAODC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACJ,uDAEJG,KAAKP,MAAMC,a,GAhBEQ,aCkDbC,E,YA3CX,WAAYV,GAAQ,IAAD,8BACf,4CAAMA,KAeVW,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAf1C,EAAKZ,MAAQ,CACTd,OAAQ,GACRwB,YAAa,IAJF,E,iFAQE,IAAD,OAChBG,MAAM,8CACDC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CACzBnB,OAAQ+B,S,+BAQV,IAAD,OAECC,EAAiBd,KAAKJ,MAAMd,OAAOiC,QAAO,SAAAC,GAAK,OAAIA,EAAM5C,KAAK6C,cAAcC,SAAS,EAAKtB,MAAMU,YAAYW,kBAElH,OAAIjB,KAAKJ,MAAMd,OAAOqC,QAAU,EACrB,yCAGH,yBAAK5C,UAAU,OACX,6CACA,kBAAC,EAAD,CAAWY,aAAca,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUtB,OAAQgC,W,GAlC5BZ,aCIEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.a46b8692.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Card\":\"card_Card__2tWcJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CardList\":\"cardlist_CardList__NNF_m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"search__input\":\"searchbox_search__input__3b1NG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Scroll\":\"scroll_Scroll__3IYzZ\"};","import React from 'react';\r\nimport styles from './card.module.scss';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n    return (\r\n        <div className={styles.Card}>\r\n            <img alt= \"robots\" width=\"200\" height=\"200\" src={`https://robohash.org/${id}?set=set2`} />\r\n            <div>\r\n                <h2> {name} </h2>\r\n                <h3> {email} </h3>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from \"./Card\";\r\nimport styles from \"./cardlist.module.scss\";\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <div className={styles.CardList}>\r\n        {\r\n            robots.map(cur => {\r\n                return <Card key={cur.id} name={cur.name} email={cur.email} id ={cur.id}/>\r\n            })\r\n            \r\n        }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CardList;","import React from 'react';\r\nimport styles from './searchbox.module.scss';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return (\r\n        <div>\r\n            <input type=\"text\" className={styles.search__input} placeholder=\"Search robots\" onChange={searchChange}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport styles from './scroll.module.scss';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div className={styles.Scroll}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1> Something went wrong! </h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n};\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport \"./App.css\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundary from \"../components/ErrorBoundary\";\r\n// import { robots } from \"../robots\";\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: \"\"\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n            .then(resp => resp.json())\r\n            .then(users => this.setState({\r\n                robots: users\r\n            }))\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchfield: event.target.value })\r\n    }\r\n\r\n    render() {\r\n\r\n        const filteredrobots = this.state.robots.filter(robot => robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase()))\r\n\r\n        if (this.state.robots.length <= 0) {\r\n            return <h1> Loading </h1>\r\n        } else {\r\n            return (\r\n                <div className=\"App\">\r\n                    <h1> Robofriends </h1>\r\n                    <SearchBox searchChange={this.onSearchChange}/>\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots={filteredrobots}/>\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}