{"version":3,"sources":["components/card.module.scss","components/cardlist.module.scss","components/searchbox.module.scss","components/scroll.module.scss","components/Card.tsx","components/CardList.tsx","components/SearchBox.tsx","components/Scroll.tsx","components/ErrorBoundary.tsx","store/actions/actionTypes.tsx","container/App.tsx","store/actions/actions.tsx","serviceWorker.js","store/reducers/reducers.tsx","index.tsx"],"names":["module","exports","Card","name","email","id","className","styles","alt","width","height","src","CardList","robots","map","cur","key","SearchBox","searchChange","aria-label","type","search__input","placeholder","onChange","Scroll","props","children","ErrorBoundary","state","hasError","this","setState","Component","actionTypes","App","onRobotsChange","filteredrobots","filter","robot","toLowerCase","includes","searchField","isPending","onSearchChange","connect","seRR","reRR","err","dispatch","event","text","target","value","payload","fetch","then","resp","json","users","catch","error","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0497d53d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Card\":\"card_Card__2tWcJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CardList\":\"cardlist_CardList__NNF_m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"search__input\":\"searchbox_search__input__3b1NG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Scroll\":\"scroll_Scroll__3IYzZ\"};","import React from 'react';\r\nimport styles from './card.module.scss';\r\nimport { IRobot } from \"../container/App\";\r\n\r\nconst Card = ({ name, email, id }: IRobot) => {\r\n    return (\r\n        <div className={styles.Card}>\r\n            <img alt= \"robots\" width=\"200\" height=\"200\" src={`https://robohash.org/${id}?size=300x300`} />\r\n            <div>\r\n                <h2> {name} </h2>\r\n                <h3> {email} </h3>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from \"./Card\";\r\nimport styles from \"./cardlist.module.scss\";\r\nimport { IRobot } from \"../container/App\";\r\n\r\nconst CardList = ({ robots }: { robots: Array < IRobot > }) => {\r\n    return (\r\n        <div className={styles.CardList}>\r\n        {\r\n            robots.map(cur => {\r\n                return <Card key={cur.id} name={cur.name} email={cur.email} id ={cur.id}/>\r\n            })\r\n            \r\n        }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CardList;","import React from 'react';\r\nimport styles from './searchbox.module.scss';\r\n\r\ninterface ISearchBoxProps {\r\n    searchChange(event: React.SyntheticEvent < HTMLInputElement > ): void\r\n}\r\n\r\nconst SearchBox = ({ searchChange }: ISearchBoxProps) => {\r\n    return (\r\n        <div>\r\n            <input aria-label=\"Search robots\" type=\"text\" className={styles.search__input} placeholder=\"Search robots\" onChange={searchChange}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport styles from './scroll.module.scss';\r\n\r\ntype Props = {\r\n    children ? : JSX.Element\r\n}\r\n\r\nconst Scroll = (props: Props) => {\r\n    return (\r\n        <div className={styles.Scroll}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\ninterface IEbProps {\r\n\r\n}\r\n\r\ninterface IEbState {\r\n    hasError: boolean\r\n}\r\n\r\nclass ErrorBoundary extends Component < IEbProps, IEbState > {\r\n    constructor(props: IEbProps) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch() {\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1> Something went wrong! </h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n};\r\n\r\nexport default ErrorBoundary;","export const actionTypes = {\r\n    CHANGE_SEARCHFIELD: \"CHANGE_SEARCHFIELD\",\r\n    REQUEST_ROBOTS_PENDING: 'REQUEST_ROBOTS_PENDING',\r\n    REQUEST_ROBOTS_SUCCESS: 'REQUEST_ROBOTS_SUCCESS',\r\n    REQUEST_ROBOTS_FAILED: 'REQUEST_ROBOTS_FAILED'\r\n};","import React, { Component } from 'react';\r\nimport \"./App.css\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundary from \"../components/ErrorBoundary\";\r\n// import { robots } from \"../robots\";\r\n\r\n//redux\r\nimport { setSearchField, requestRobots } from '../store/actions/actions';\r\nimport { connect } from 'react-redux';\r\n\r\nexport interface IRobot {\r\n    name: string,\r\n        email: string,\r\n        id: number\r\n}\r\n\r\ninterface IEbProps {\r\n    onRobotsChange: any,\r\n        robots: Array < IRobot > ,\r\n        isPending: boolean,\r\n        onSearchChange: any,\r\n        searchField: string,\r\n\r\n}\r\n\r\ninterface IEbState {\r\n\r\n}\r\n\r\nclass App extends Component < IEbProps, IEbState > {\r\n    // constructor(props) {\r\n    // super(props);\r\n    // this.state = {\r\n    //     robots: [],\r\n    //     // searchfield: \"\"\r\n    // }\r\n    // }\r\n\r\n    componentDidMount(): void {\r\n        // fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n        //     .then(resp => resp.json())\r\n        //     .then(users => this.setState({\r\n        //         robots: users\r\n        //     }))\r\n        this.props.onRobotsChange()\r\n    }\r\n\r\n    // onSearchChange = (event) => {\r\n    //     this.setState({ searchfield: event.target.value })\r\n    // }\r\n\r\n    render(): JSX.Element {\r\n\r\n        const filteredrobots = this.props.robots.filter(robot => robot.name.toLowerCase().includes(this.props.searchField.toLowerCase()))\r\n\r\n        if (this.props.isPending) {\r\n            return <h1> Loading </h1>\r\n        } else {\r\n            return (\r\n                <div className=\"App\">\r\n                    <h1> Robofriends </h1>\r\n                    <SearchBox searchChange={this.props.onSearchChange}/>\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots={filteredrobots}/>\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        searchField: state.seRR.searchField,\r\n        isPending: state.reRR.isPending,\r\n        robots: state.reRR.robots,\r\n        err: state.reRR.err\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n    return {\r\n        onSearchChange: (event: any): void => dispatch(setSearchField(event.target.value)),\r\n        onRobotsChange: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { actionTypes } from './actionTypes';\r\n\r\nexport const setSearchField = (text: String) => {\r\n    return {\r\n        type: actionTypes.CHANGE_SEARCHFIELD,\r\n        payload: text\r\n    }\r\n}\r\n\r\n// the middleware knows how to handle functions, it passes the dispatch method as an argument to the function, thus making it able to dispatch actions itself. \r\nexport const requestRobots = () => (dispatch: any) => {\r\n    dispatch({ type: actionTypes.REQUEST_ROBOTS_PENDING });\r\n\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n        .then(resp => resp.json())\r\n        .then(users => dispatch({ type: actionTypes.REQUEST_ROBOTS_SUCCESS, payload: users }))\r\n        .catch(error => dispatch({ type: actionTypes.REQUEST_ROBOTS_FAILED, payload: error }))\r\n\r\n} //return a function, redux-thunk, will listen to it, and passes the dispatch method as an argument to the function.","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { actionTypes } from '../actions/actionTypes';\r\n\r\nconst initialStateSearch = {\r\n    searchField: \"\"\r\n}\r\n\r\ninterface Iaction {\r\n    type ? : string,\r\n        payload ? : any\r\n}\r\n\r\nexport const searchRobotsReducer = (state = initialStateSearch, action: Iaction = {}) => {\r\n    switch (action.type) {\r\n        case actionTypes.CHANGE_SEARCHFIELD:\r\n            return {\r\n                ...state,\r\n                searchField: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n//______________________________________________________________________\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    err: ''\r\n}\r\n\r\nexport const requestRobotsReducer = (state = initialStateRobots, action: Iaction = {}) => {\r\n    switch (action.type) {\r\n        case actionTypes.REQUEST_ROBOTS_PENDING:\r\n            return {\r\n                ...state,\r\n                isPending: true\r\n            };\r\n        case actionTypes.REQUEST_ROBOTS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                robots: action.payload,\r\n                isPending: false\r\n            };\r\n        case actionTypes.REQUEST_ROBOTS_FAILED:\r\n            return {\r\n                ...state,\r\n                err: action.payload,\r\n                isPending: false\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\n\n//redux\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { searchRobotsReducer, requestRobotsReducer } from \"./store/reducers/reducers\"\n// import { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\n// const logger = createLogger();\n\n// const rootReducer \nconst rootReducer = combineReducers({\n    seRR: searchRobotsReducer,\n    reRR: requestRobotsReducer\n})\n\n// const store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger)); // middleware will run in order\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root') as HTMLElement);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}